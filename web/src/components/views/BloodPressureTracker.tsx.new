import React, { useState, useMemo, useCallback } from 'react';
import {
  Typography,
  TextField,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Box,
  SelectChangeEvent,
  Collapse,
  IconButton,
  Stack,
  Tooltip
} from '@mui/material';
import { 
  Add as AddIcon, 
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
  Delete as DeleteIcon
} from '@mui/icons-material';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip as ChartTooltip, Legend, ResponsiveContainer } from 'recharts';
import { format, parseISO, startOfDay, subDays, subMonths, isAfter } from 'date-fns';
import { BloodPressureEntry, Tag } from '../../types';
import { BloodPressureContext } from '../../contexts/DataContext';
import { ConfirmDialog } from '../common/ConfirmDialog';

interface BloodPressureTrackerProps {
  globalFilterTags?: Tag[];
  viewId: string;
}

export const BloodPressureTracker: React.FC<BloodPressureTrackerProps> = ({ globalFilterTags = [], viewId }) => {
  // ... all the existing state and handlers remain the same ...

  return (
    <Box>
      {/* Add Reading Button and Form */}
      <Box sx={{ mb: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Typography variant="subtitle1">Blood Pressure Readings</Typography>
        <Button 
          variant="outlined" 
          color="primary" 
          size="small"
          onClick={toggleAddForm}
        >
          {showAddForm ? "Cancel" : "Add Reading"}
        </Button>
      </Box>
          
      <Collapse in={showAddForm} timeout="auto" unmountOnExit>
        <Box sx={{ mb: 2, p: 2, bgcolor: 'background.paper', borderRadius: 1, border: '1px solid', borderColor: 'divider' }}>
          <form onSubmit={handleSubmit}>
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>
              <Box sx={{ width: { xs: '100%', sm: 'calc(50% - 8px)', md: 'calc(25% - 8px)' } }}>
                <Tooltip title="The top number representing the pressure when your heart beats" arrow placement="top">
                  <TextField
                    label="Systolic (mmHg)"
                    type="number"
                    value={newReading.systolic}
                    onChange={(e) => handleInputChange('systolic', e.target.value)}
                    fullWidth
                    required
                    error={!!errors.systolic}
                    helperText={errors.systolic}
                    InputProps={{ inputProps: { min: 60, max: 220 } }}
                    size="small"
                  />
                </Tooltip>
              </Box>
              <Box sx={{ width: { xs: '100%', sm: 'calc(50% - 8px)', md: 'calc(25% - 8px)' } }}>
                <Tooltip title="The bottom number representing the pressure when your heart rests" arrow placement="top">
                  <TextField
                    label="Diastolic (mmHg)"
                    type="number"
                    value={newReading.diastolic}
                    onChange={(e) => handleInputChange('diastolic', e.target.value)}
                    fullWidth
                    required
                    error={!!errors.diastolic}
                    helperText={errors.diastolic}
                    InputProps={{ inputProps: { min: 40, max: 120 } }}
                    size="small"
                  />
                </Tooltip>
              </Box>
              <Box sx={{ width: { xs: '100%', sm: 'calc(50% - 8px)', md: 'calc(25% - 8px)' } }}>
                <Tooltip title="Your pulse rate in beats per minute" arrow placement="top">
                  <TextField
                    label="Heart Rate (BPM)"
                    type="number"
                    value={newReading.heartRate}
                    onChange={(e) => handleInputChange('heartRate', e.target.value)}
                    fullWidth
                    required
                    error={!!errors.heartRate}
                    helperText={errors.heartRate}
                    InputProps={{ inputProps: { min: 40, max: 180 } }}
                    size="small"
                  />
                </Tooltip>
              </Box>
              <Box sx={{ width: { xs: '100%', sm: 'calc(50% - 8px)', md: 'calc(25% - 8px)' } }}>
                <TextField
                  label="Date & Time"
                  type="datetime-local"
                  value={newReading.timeOfDay}
                  onChange={(e) => handleInputChange('timeOfDay', e.target.value)}
                  fullWidth
                  required
                  InputLabelProps={{ shrink: true }}
                  data-testid="time-input"
                  size="small"
                />
              </Box>
              <Box sx={{ width: '100%', mt: 2 }}>
                <Button
                  type="submit" 
                  variant="contained" 
                  color="primary"
                  size="small"
                >
                  Save Reading
                </Button>
              </Box>
            </Box>
          </form>
        </Box>
      </Collapse>

      {/* Chart with Filters */}
      <Box sx={{ mb: 3, p: 2, bgcolor: 'background.paper', borderRadius: 1, border: '1px solid', borderColor: 'divider' }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: showChartSection ? 2 : 0, flexWrap: 'wrap', gap: 2 }}>
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <Typography variant="subtitle1">Blood Pressure Trends</Typography>
            <IconButton 
              onClick={toggleChartSection}
              size="small"
              aria-expanded={showChartSection}
              aria-label="toggle chart section"
              sx={{ ml: 1, transform: showChartSection ? 'rotate(0deg)' : 'rotate(180deg)', transition: 'transform 0.3s' }}
            >
              {showChartSection ? <ExpandLessIcon /> : <ExpandMoreIcon />}
            </IconButton>
          </Box>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>
            <FormControl sx={{ minWidth: 140 }} size="small">
              <InputLabel>Date Range</InputLabel>
              <Select
                value={dateRangeFilter}
                label="Date Range"
                onChange={handleDateRangeFilterChange}
                size="small"
              >
                <MenuItem value="today">Today</MenuItem>
                <MenuItem value="last7days">Last 7 Days</MenuItem>
                <MenuItem value="lastMonth">Last Month</MenuItem>
                <MenuItem value="last6months">Last 6 Months</MenuItem>
                <MenuItem value="all">All Time</MenuItem>
              </Select>
            </FormControl>
            
            <FormControl sx={{ minWidth: 120 }} size="small">
              <InputLabel>Time of Day</InputLabel>
              <Select
                value={timeOfDayFilter}
                label="Time of Day"
                onChange={handleTimeOfDayFilterChange}
                size="small"
              >
                <MenuItem value="all">All Times</MenuItem>
                <MenuItem value="morning">Morning</MenuItem>
                <MenuItem value="afternoon">Afternoon</MenuItem>
                <MenuItem value="evening">Evening</MenuItem>
                <MenuItem value="night">Night</MenuItem>
              </Select>
            </FormControl>
          </Stack>
        </Box>
        <Collapse in={showChartSection} timeout="auto" unmountOnExit>
          <Box sx={{ mt: 2 }}>
            {chartData.length > 0 ? (
              <Box sx={{ height: 350 }}>
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={chartData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="time" />
                    <YAxis />
                    <ChartTooltip />
                    <Legend />
                    <Line type="monotone" dataKey="systolic" stroke="#8884d8" name="Systolic" />
                    <Line type="monotone" dataKey="diastolic" stroke="#82ca9d" name="Diastolic" />
                    <Line type="monotone" dataKey="heartRate" stroke="#ffc658" name="Heart Rate" />
                  </LineChart>
                </ResponsiveContainer>
              </Box>
            ) : (
              <Box sx={{ py: 4, textAlign: 'center' }}>
                <Typography variant="body1" color="text.secondary">
                  No data available for the selected filters. Try changing your filter criteria or add new readings.
                </Typography>
              </Box>
            )}
          </Box>
        </Collapse>
      </Box>

      {/* Recent Readings List */}
      <Box>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: showReadingsSection ? 2 : 0 }}>
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <Typography variant="subtitle1">Recent Readings</Typography>
            <IconButton 
              onClick={toggleReadingsSection}
              size="small"
              aria-expanded={showReadingsSection}
              aria-label="toggle readings section"
              sx={{ ml: 1, transform: showReadingsSection ? 'rotate(0deg)' : 'rotate(180deg)', transition: 'transform 0.3s' }}
            >
              {showReadingsSection ? <ExpandLessIcon /> : <ExpandMoreIcon />}
            </IconButton>
          </Box>
        </Box>
        <Collapse in={showReadingsSection} timeout="auto" unmountOnExit>
          {filteredItems.length > 0 ? (
            <Box>
              {filteredItems.map((reading) => (
                <Box 
                  key={reading.id}
                  sx={{ 
                    mb: 1,
                    p: 1,
                    bgcolor: 'background.paper',
                    borderRadius: 1,
                    border: '1px solid',
                    borderColor: 'divider'
                  }}
                >
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
                    <Box>
                      <Typography variant="body2" color="text.secondary">
                        {format(parseISO(reading.timeOfDay), 'PPpp')}
                      </Typography>
                      <Typography variant="body1">
                        {reading.systolic}/{reading.diastolic} mmHg
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        Heart Rate: {reading.heartRate} BPM
                      </Typography>
                    </Box>
                    <Box sx={{ display: 'flex', flexDirection: 'row' }}>
                      <IconButton
                        size="small"
                        color="error"
                        onClick={() => handleDeleteClick(reading.id)}
                        title="Delete reading"
                      >
                        <DeleteIcon />
                      </IconButton>
                    </Box>
                  </Box>
                </Box>
              ))}
            </Box>
          ) : (
            <Box sx={{ py: 3, textAlign: 'center' }}>
              <Typography variant="body1" color="text.secondary">
                No readings found with the current filters. Adjust your filters or add new readings.
              </Typography>
              {!showAddForm && (
                <Button 
                  variant="outlined" 
                  color="primary" 
                  size="small"
                  onClick={toggleAddForm}
                  sx={{ mt: 2 }}
                >
                  Add Your First Reading
                </Button>
              )}
            </Box>
          )}
        </Collapse>
      </Box>

      <ConfirmDialog
        isOpen={showDeleteConfirm}
        title="Confirm Deletion"
        message="Are you sure you want to delete this blood pressure reading? This action cannot be undone."
        onConfirm={handleDeleteConfirm}
        onCancel={() => {
          setShowDeleteConfirm(false);
          setItemToDelete(null);
        }}
      />
    </Box>
  );
};
